// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';
const PORT = process.env.PORT || 3000;

const AVAILABLE_MODELS = ['llama3-8b-8192', 'llama3-70b-8192', 'mixtral-8x7b-32768', 'gemma-7b-it'];

// --- –ö–õ–ê–°–°–´ –ü–†–û–ï–ö–¢–ê ---

class NetworkManager {
    constructor() {
        this.networks = {
            network1: { name: 'Analytical Network', short_name: 'analytical' },
            network2: { name: 'Creative Network', short_name: 'creative' },
            network3: { name: 'Implementation Network', short_name: 'implementation' },
            network4: { name: 'Data Science Network', short_name: 'data' },
            network5: { name: 'Ethical Network', short_name: 'ethical' },
            network6: { name: 'User Experience Network', short_name: 'ux' },
            network7: { name: 'Systems Thinking Network', short_name: 'systems' },
            network8: { name: 'Devil\'s Advocate Network', short_name: 'advocate' },
            summarizer: { name: 'Synthesizer Network', short_name: 'synthesizer' }
        };
    }

    async generateResponse(networkId, prompt, settings, sendMessageCallback) {
        const network = this.networks[networkId];
        if (!network) throw new Error(`Network ${networkId} not found.`);

        let systemPrompt = settings.system_prompts[networkId];
        systemPrompt += `\n\nIMPORTANT INSTRUCTION: You MUST respond ONLY in ${settings.discussion_language}. Do not use any other language.`;

        const maxRetries = 3;
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                await new Promise(resolve => setTimeout(resolve, 1000));

                const response = await axios.post(
                    GROQ_API_URL,
                    {
                        model: settings.model,
                        messages: [
                            { role: "system", content: systemPrompt },
                            { role: "user", content: prompt }
                        ],
                        temperature: settings.temperature,
                        max_tokens: settings.max_tokens,
                    },
                    { headers: { 'Authorization': `Bearer ${GROQ_API_KEY}` } }
                );
                return response.data.choices[0].message.content.trim();
            } catch (error) {
                console.error(`\n--- –û–®–ò–ë–ö–ê API GROQ –¥–ª—è "${network.name}", –ø–æ–ø—ã—Ç–∫–∞ ${attempt} ---`);
                if (error.response && error.response.status === 429) {
                    const errorMessage = error.response.data.error.message;
                    let waitTime = 20;
                    const match = errorMessage.match(/try again in ([\d.]+)s/i);
                    if (match && match[1]) {
                        waitTime = Math.ceil(parseFloat(match[1]));
                    }

                    console.log(`Rate limit. –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime} —Å–µ–∫—É–Ω–¥...`);
                    if (sendMessageCallback) {
                        sendMessageCallback(`‚è≥ _–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç API, –∂–¥—É ${waitTime} —Å–µ–∫—É–Ω–¥..._`);
                    }
                    
                    if (attempt < maxRetries) {
                        await new Promise(resolve => setTimeout(resolve, waitTime * 1000));
                        continue;
                    } else {
                        throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ "${network.name}". –õ–∏–º–∏—Ç –Ω–µ —Å–±—Ä–æ—Å–∏–ª—Å—è.`);
                    }
                } else {
                    if (error.response) {
                        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
                    } else {
                        console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
                    }
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}".`);
                }
            }
        }
    }
}

class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback;
        this.networkManager = new NetworkManager();
        this.initializeSettings();
        this.resetProject();
    }

    initializeSettings() {
        this.settings = {
            model: 'llama3-8b-8192',
            temperature: 0.7,
            max_tokens: 1024,
            discussion_language: 'Russian',
            enabled_networks: ['network1', 'network2'],
            system_prompts: {
                network1: 'You are an Analytical Network. Focus on logic, data, and structured reasoning.',
                network2: 'You are a Creative Network. Focus on novel ideas, alternatives, and innovative perspectives.',
                network3: 'You are an Implementation Network. Focus on practical application and technical feasibility.',
                network4: 'You are a Data Science Network. Focus on statistics, patterns, and empirical evidence.',
                network5: 'You are an Ethical Network. Focus on moral implications and societal impact.',
                network6: 'You are a User Experience Network. Focus on user-centered design and usability.',
                network7: 'You are a Systems Thinking Network. Focus on holistic views and interconnections.',
                network8: 'You are a Devil\'s Advocate Network. Your role is to challenge assumptions and stress-test ideas.',
                summarizer: 'You are a Synthesizer Network. Your role is to read a discussion and create a concise, neutral summary of the key points.'
            }
        };
    }

    resetProject() {
        this.iterations = 0;
        this.maxIterations = 2;
        this.acceptedSummaries = [];
        this.isWorking = false;
    }

    async startCollaboration(topic) {
        if (this.isWorking) {
            this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.");
            return;
        }
        if (this.settings.enabled_networks.length < 2) {
            this.sendMessage("‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.");
            return;
        }

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;

        this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${topic}"`);

        try {
            await this.runDiscussionLoop();
            await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* ${error.message}`);
        } finally {
            this.isWorking = false;
        }
    }

    async runDiscussionLoop() {
        let fullConversationHistory = "";

        while (this.iterations < this.maxIterations) {
            this.iterations++;
            this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.maxIterations}* ---\n`);
            
            let iterationHistory = "";

            for (const networkId of this.settings.enabled_networks) {
                const networkName = this.networkManager.networks[networkId].name;
                
                let prompt = `Main Topic: "${this.projectDescription}"\n\n`;
                if (this.acceptedSummaries.length > 0) {
                    prompt += `Here are the accepted summaries from previous rounds:\n${this.acceptedSummaries.map((s, i) => `Summary ${i+1}: ${s}`).join('\n\n')}\n\n`;
                }
                prompt += `Here is the conversation from the current round so far:\n${iterationHistory}\n\n---\nAs the ${networkName}, provide your input now.`;

                this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                const response = await this.networkManager.generateResponse(networkId, prompt, this.settings, this.sendMessage);
                this.sendMessage(`*${networkName}:*\n${response}`);
                
                iterationHistory += `\n\n**${networkName} said:**\n${response}`;
            }

            fullConversationHistory += iterationHistory;

            this.sendMessage(`üìù _–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..._`);
            const summaryPrompt = `Please create a concise summary of the key points from the following discussion:\n\n${iterationHistory}`;
            const summary = await this.networkManager.generateResponse('summarizer', summaryPrompt, this.settings, this.sendMessage);
            this.sendMessage(`*–°–≤–æ–¥–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iterations}:*\n${summary}`);
            
            this.sendMessage(`üó≥Ô∏è _–ü—Ä–æ–≤–æ–¥–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–≤–æ–¥–∫–µ..._`);
            let votesFor = 0;
            let votesAgainst = 0;

            for (const networkId of this.settings.enabled_networks) {
                const networkName = this.networkManager.networks[networkId].name;
                const votePrompt = `Here is the discussion summary to vote on:\n"${summary}"\n\nAs the ${networkName}, do you accept this summary? Respond with only "Accept" or "Reject" and a brief reason.`;
                const voteResponse = await this.networkManager.generateResponse(networkId, votePrompt, this.settings, this.sendMessage);
                this.sendMessage(`*${networkName} –≥–æ–ª–æ—Å—É–µ—Ç:*\n${voteResponse}`);
                
                if (voteResponse.toLowerCase().includes('accept')) {
                    votesFor++;
                } else {
                    votesAgainst++;
                }
            }

            if (votesAgainst > votesFor) {
                this.sendMessage(`*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ* (${votesFor} –∑–∞, ${votesAgainst} –ø—Ä–æ—Ç–∏–≤). –°–≤–æ–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
            } else {
                this.sendMessage(`*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!* (${votesFor} –∑–∞, ${votesAgainst} –ø—Ä–æ—Ç–∏–≤). –°–≤–æ–¥–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
                this.acceptedSummaries.push(summary);
            }
        }
    }

    async finalizeDevelopment() {
        if (this.acceptedSummaries.length === 0) {
            this.sendMessage("\n\n--- üèÅ *–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ —Å–≤–æ–¥–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω.* ---");
            return;
        }
        this.sendMessage("\n\n--- üèÅ *–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...* ---");
        const finalPrompt = `Based on the topic "${this.projectDescription}" and the following accepted summaries, create a comprehensive final output. \n\nSummaries:\n${this.acceptedSummaries.join('\n\n')}`;
        const finalOutput = await this.networkManager.generateResponse('summarizer', finalPrompt, this.settings, this.sendMessage);
        this.sendMessage(`*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏:*\n\n${finalOutput}`);
    }
}

// --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---

if (!TELEGRAM_TOKEN || !GROQ_API_KEY) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const chatSessions = {};
const activeRequests = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º—ã –∂–¥–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot.setMyCommands([
    { command: '/start', description: 'üöÄ –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' },
    { command: '/settings', description: '‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
    { command: '/reset', description: 'üóë –°–±—Ä–æ—Å–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
]);

function getOrCreateSession(chatId) {
    if (!chatSessions[chatId]) {
        chatSessions[chatId] = new NeuralCollaborativeFramework((text) => {
            bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
               .catch(() => bot.sendMessage(chatId, text));
        });
    }
    return chatSessions[chatId];
}

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ò –ö–ù–û–ü–û–ö ---

const MAIN_KEYBOARD = {
    reply_markup: {
        keyboard: [
            [{ text: 'üöÄ –ù–æ–≤–æ–µ –û–±—Å—É–∂–¥–µ–Ω–∏–µ' }, { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }],
        ],
        resize_keyboard: true,
    },
};

bot.onText(/\/start/, (msg) => {
    const welcomeText = `
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º AI-–ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å –∑–∞–¥–∞–Ω–Ω—É—é –≤–∞–º–∏ —Ç–µ–º—É.

*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –ù–æ–≤–æ–µ –û–±—Å—É–∂–¥–µ–Ω–∏–µ" –≤–Ω–∏–∑—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

*–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- *üöÄ –ù–æ–≤–æ–µ –û–±—Å—É–∂–¥–µ–Ω–∏–µ:* –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.
- *‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:* –£–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞, –≤—ã–±–∏—Ä–∞—Ç—å AI-–º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
- \`/reset\`: –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    `;
    bot.sendMessage(msg.chat.id, welcomeText, { ...MAIN_KEYBOARD, parse_mode: 'Markdown' });
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith('/')) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (activeRequests[chatId]) {
        handleActiveRequest(chatId, text);
        return;
    }

    switch (text) {
        case 'üöÄ –ù–æ–≤–æ–µ –û–±—Å—É–∂–¥–µ–Ω–∏–µ':
            bot.sendMessage(chatId, '–ö–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ –≤ —á–∞—Ç.');
            activeRequests[chatId] = { type: 'topic' };
            break;
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            sendSettingsMessage(chatId);
            break;
    }
});

bot.onText(/\/reset/, (msg) => {
    delete chatSessions[msg.chat.id];
    bot.sendMessage(msg.chat.id, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", MAIN_KEYBOARD);
});

// --- –õ–û–ì–ò–ö–ê –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö ---

function sendSettingsMessage(chatId) {
    const session = getOrCreateSession(chatId);
    const s = session.settings;
    const nm = session.networkManager;

    const enabledNetworksText = s.enabled_networks.length > 0
        ? s.enabled_networks.map(id => nm.networks[id].name).join(', ')
        : '–ù–∏–∫—Ç–æ –Ω–µ –≤–∫–ª—é—á–µ–Ω';

    const settingsText = `
*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:*

*–£—á–∞—Å—Ç–Ω–∏–∫–∏:* ${enabledNetworksText}
*–Ø–∑—ã–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:* \`${s.discussion_language}\`
*AI-–ú–æ–¥–µ–ª—å:* \`${s.model}\`

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    `;

    const inlineKeyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üïπ –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data: 'menu_toggle' }],
                [{ text: 'ü§ñ AI-–ú–æ–¥–µ–ª—å', callback_data: 'menu_model' }, { text: 'üåç –Ø–∑—ã–∫', callback_data: 'menu_lang' }],
                [{ text: 'üîß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'menu_advanced' }],
                [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_settings' }]
            ]
        }
    };

    bot.sendMessage(chatId, settingsText, { ...inlineKeyboard, parse_mode: 'Markdown' });
}

bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;
    const session = getOrCreateSession(chatId);

    bot.answerCallbackQuery(query.id);

    if (data.startsWith('toggle_')) {
        const networkId = data.split('_')[1];
        const enabled = session.settings.enabled_networks;
        if (enabled.includes(networkId)) {
            session.settings.enabled_networks = enabled.filter(id => id !== networkId);
        } else {
            enabled.push(networkId);
        }
        updateToggleMenu(chatId, messageId, session);
    } else if (data.startsWith('set_model_')) {
        session.settings.model = data.replace('set_model_', '');
        updateModelMenu(chatId, messageId, session);
    } else if (data.startsWith('set_lang_')) {
        session.settings.discussion_language = data.replace('set_lang_', '');
        updateLangMenu(chatId, messageId, session);
    } else if (data.startsWith('prompt_for_')) {
        const networkId = data.replace('prompt_for_', '');
        const networkName = session.networkManager.networks[networkId].name;
        bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è "${networkName}":`);
        activeRequests[chatId] = { type: 'system_prompt', networkId: networkId };
        bot.deleteMessage(chatId, messageId);
    } else if (data === 'set_temp_prompt') {
        bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0):`);
        activeRequests[chatId] = { type: 'temperature' };
        bot.deleteMessage(chatId, messageId);
    } else if (data === 'set_tokens_prompt') {
        bot.sendMessage(chatId, `–ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 32768):`);
        activeRequests[chatId] = { type: 'max_tokens' };
        bot.deleteMessage(chatId, messageId);
    } else if (data === 'menu_toggle') {
        updateToggleMenu(chatId, messageId, session);
    } else if (data === 'menu_model') {
        updateModelMenu(chatId, messageId, session);
    } else if (data === 'menu_lang') {
        updateLangMenu(chatId, messageId, session);
    } else if (data === 'menu_advanced') {
        updateAdvancedMenu(chatId, messageId, session);
    } else if (data === 'menu_prompts') {
        updatePromptsMenu(chatId, messageId, session);
    } else if (data === 'back_to_settings') {
        bot.deleteMessage(chatId, messageId);
        sendSettingsMessage(chatId);
    } else if (data === 'close_settings') {
        bot.deleteMessage(chatId, messageId);
    }
});

function updateToggleMenu(chatId, messageId, session) {
    const { enabled_networks } = session.settings;
    const { networks } = session.networkManager;
    
    const buttons = Object.entries(networks).filter(([id]) => id !== 'summarizer').map(([id, net]) => {
        const status = enabled_networks.includes(id) ? '‚úÖ' : '‚ùå';
        return { text: `${status} ${net.name}`, callback_data: `toggle_${id}` };
    });

    const keyboard = [];
    for (let i = 0; i < buttons.length; i += 2) {
        keyboard.push(buttons.slice(i, i + 2));
    }
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]);

    bot.editMessageText('*–í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:*', {
        chat_id: chatId, message_id: messageId, parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(() => {});
}

function updateModelMenu(chatId, messageId, session) {
    const currentModel = session.settings.model;
    const keyboard = AVAILABLE_MODELS.map(model => ([{ text: `${model === currentModel ? 'üîò' : '‚ö™Ô∏è'} ${model}`, callback_data: `set_model_${model}` }]));
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]);
    
    bot.editMessageText('*–í—ã–±–µ—Ä–∏—Ç–µ AI-–º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è:*', {
        chat_id: chatId, message_id: messageId, parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(() => {});
}

function updateLangMenu(chatId, messageId, session) {
    const currentLang = session.settings.discussion_language;
    const languages = ['Russian', 'English', 'German', 'French', 'Ukrainian'];
    const keyboard = languages.map(lang => ([{ text: `${lang === currentLang ? 'üîò' : '‚ö™Ô∏è'} ${lang}`, callback_data: `set_lang_${lang}` }]));
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]);

    bot.editMessageText('*–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç –æ–±—â–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:*', {
        chat_id: chatId, message_id: messageId, parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(() => {});
}

function updateAdvancedMenu(chatId, messageId, session) {
    const s = session.settings;
    const text = `
*–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*

- *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* \`${s.temperature}\` (–≤–ª–∏—è–µ—Ç –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)
- *–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:* \`${s.max_tokens}\` (–≤–ª–∏—è–µ—Ç –Ω–∞ –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞)
    `;
    const keyboard = [
        [{ text: 'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', callback_data: 'set_temp_prompt' }, { text: 'üìÑ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤', callback_data: 'set_tokens_prompt' }],
        [{ text: 'üß† –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã', callback_data: 'menu_prompts' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'back_to_settings' }]
    ];

    bot.editMessageText(text, {
        chat_id: chatId, message_id: messageId, parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
    }).catch(() => {});
}

function updatePromptsMenu(chatId, messageId, session) {
    const { networks } = session.networkManager;
    const buttons = Object.entries(networks).map(([id, net]) => ([{ text: net.name, callback_data: `prompt_for_${id}` }]));
    buttons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu_advanced' }]);

    bot.editMessageText('*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–ª–∏—á–Ω–æ—Å—Ç—å):*', {
        chat_id: chatId, message_id: messageId, parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: buttons }
    }).catch(() => {});
}

function handleActiveRequest(chatId, text) {
    const request = activeRequests[chatId];
    const session = getOrCreateSession(chatId);
    delete activeRequests[chatId]; // –í–∞–∂–Ω–æ: —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–≤–∞–∂–¥—ã

    switch (request.type) {
        case 'topic':
            session.startCollaboration(text);
            break;
        case 'temperature':
            const temp = parseFloat(text);
            if (!isNaN(temp) && temp >= 0.0 && temp <= 2.0) {
                session.settings.temperature = temp;
                bot.sendMessage(chatId, `‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: \`${temp}\``, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0.');
            }
            sendSettingsMessage(chatId);
            break;
        case 'max_tokens':
            const tokens = parseInt(text, 10);
            if (!isNaN(tokens) && tokens > 0 && tokens <= 32768) {
                session.settings.max_tokens = tokens;
                bot.sendMessage(chatId, `‚úÖ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: \`${tokens}\``, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 32768.');
            }
            sendSettingsMessage(chatId);
            break;
        case 'system_prompt':
            session.settings.system_prompts[request.networkId] = text;
            const networkName = session.networkManager.networks[request.networkId].name;
            bot.sendMessage(chatId, `‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è "${networkName}" –æ–±–Ω–æ–≤–ª–µ–Ω.`);
            sendSettingsMessage(chatId);
            break;
    }
}

bot.on('polling_error', (error) => console.log(`–û—à–∏–±–∫–∞ Polling: ${error.message}`));

// --- –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER.COM ---
const app = express();
app.get('/', (req, res) => res.send('–ë–æ—Ç –∂–∏–≤ –∏ –∑–¥–æ—Ä–æ–≤!'));
app.listen(PORT, () => console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));