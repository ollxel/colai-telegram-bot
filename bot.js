require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const { GoogleAuth } = require('googleapis').google.auth;
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const fs =require('fs');
const os = require('os');
const path = require('path');

// --- –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GOOGLE_GEMINI_API_KEY = process.env.GOOGLE_GEMINI_API_KEY;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

if (!TELEGRAM_TOKEN || !OPENROUTER_API_KEY) {
    throw new Error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –∏ OPENROUTER_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
}

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions';
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=${GOOGLE_GEMINI_API_KEY}`;
const PORT = process.env.PORT || 3000;
const MAX_RETRIES = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
const FALLBACK_MODEL_ID = 'meta-llama/llama-3-8b-instruct:free'; // –ù–∞–¥–µ–∂–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å

// --- –°–ü–ò–°–û–ö –ú–û–î–ï–õ–ï–ô (–í–°–ï –ß–ï–†–ï–ó OPENROUTER) ---
const MODEL_MAP = {
    'GPT-4o': 'openai/gpt-4o',
    'GPT-4 Turbo': 'openai/gpt-4-turbo',
    'Llama 3 70B': 'meta-llama/llama-3-70b-instruct',
    'Claude 3.5 Sonnet': 'anthropic/claude-3.5-sonnet',
    'Gemini Pro 1.5': 'google/gemini-pro-1.5',
    'Llama 3 8B (Free)': 'meta-llama/llama-3-8b-instruct:free',
    'Mistral 7B (Free)': 'mistralai/mistral-7b-instruct:free',
};
const AVAILABLE_MODELS = Object.keys(MODEL_MAP);

const VOTE_KEYWORDS = {
    'English': { accept: 'accept', reject: 'reject' },
    'Russian': { accept: '–ø—Ä–∏–Ω–∏–º–∞—é', reject: '–æ—Ç–∫–ª–æ–Ω—è—é' },
    'German': { accept: 'akzeptieren', reject: 'ablehnen' },
    'French': { accept: 'accepter', reject: 'rejeter' },
    'Ukrainian': { accept: '–ø—Ä–∏–π–º–∞—é', reject: '–≤—ñ–¥—Ö–∏–ª—è—é' }
};

// =========================================================================
// === –ù–û–í–´–ô –£–°–¢–û–ô–ß–ò–í–´–ô –ö –û–®–ò–ë–ö–ê–ú NETWORK MANAGER ===
// =========================================================================
class NetworkManager {
    constructor() {
        this.networks = {
            network1: { name: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –°–µ—Ç—å', short_name: 'analytical' },
            network2: { name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –°–µ—Ç—å', short_name: 'creative' },
            network3: { name: '–°–µ—Ç—å –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏', short_name: 'implementation' },
            network4: { name: '–°–µ—Ç—å Data Science', short_name: 'data' },
            network5: { name: '–≠—Ç–∏—á–µ—Å–∫–∞—è –°–µ—Ç—å', short_name: 'ethical' },
            network6: { name: '–°–µ—Ç—å UX', short_name: 'ux' },
            network7: { name: '–°–µ—Ç—å –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ú—ã—à–ª–µ–Ω–∏—è', short_name: 'systems' },
            network8: { name: '–°–µ—Ç—å "–ê–¥–≤–æ–∫–∞—Ç –î—å—è–≤–æ–ª–∞"', short_name: 'advocate' },
            summarizer: { name: '–°–µ—Ç—å-–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', short_name: 'synthesizer' }
        };
    }

    async generateResponse(networkId, prompt, settings, sendMessageCallback) {
        const network = this.networks[networkId] || settings.custom_networks[networkId];
        if (!network) throw new Error(`–°–µ—Ç—å ${networkId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);

        const systemPrompt = (settings.custom_networks[networkId]?.system_prompt) || settings.system_prompts[networkId] +
            `\n\n–í–ê–ñ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –í—ã –î–û–õ–ñ–ù–´ –æ—Ç–≤–µ—á–∞—Ç—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ ${settings.discussion_language} —è–∑—ã–∫–µ.`;
        
        let modelIdentifier = MODEL_MAP[settings.model];
        let currentMaxTokens = settings.custom_networks[networkId]?.max_tokens || settings.max_tokens;

        for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
            try {
                const response = await axios.post(
                    OPENROUTER_API_URL,
                    {
                        model: modelIdentifier,
                        messages: [{ role: "system", content: systemPrompt }, { role: "user", content: prompt }],
                        temperature: settings.custom_networks[networkId]?.temperature || settings.temperature,
                        max_tokens: currentMaxTokens,
                    },
                    { 
                        headers: { 
                            'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                            'HTTP-Referer': 'https://github.com/ollxel/neural-collab-bot',
                            'X-Title': 'Neural Collab Bot'
                        } 
                    }
                );
                
                const content = response.data.choices[0].message.content;
                if (!content || content.trim() === "") throw new Error("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.");
                
                return content.trim(); // –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏

            } catch (error) {
                const errorMessage = error.response?.data?.error?.message || "";
                console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –¥–ª—è "${network.name}" –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞: ${errorMessage}`);

                // --- –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

                // 1. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤/–∫—Ä–µ–¥–∏—Ç–æ–≤
                if (errorMessage.includes('can only afford')) {
                    const match = errorMessage.match(/can only afford (\d+)/);
                    if (match && match[1]) {
                        const affordableTokens = parseInt(match[1], 10) - 10; // –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º
                        console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–∂–∞—é –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ ${affordableTokens}`);
                        currentMaxTokens = affordableTokens;
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
                        continue; 
                    }
                }

                // 2. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                if (errorMessage.includes('No endpoints found')) {
                    console.log(`–ú–æ–¥–µ–ª—å ${modelIdentifier} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å: ${FALLBACK_MODEL_ID}`);
                    modelIdentifier = FALLBACK_MODEL_ID;
                    if (sendMessageCallback) {
                         // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
                        await sendMessageCallback(`_(–ú–æ–¥–µ–ª—å "${settings.model}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É—é...)_`);
                    }
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
                    continue;
                }

                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–∞–≤–µ—Ä—Ö
                if (attempt === MAX_RETRIES) {
                    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}" –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: ${errorMessage}`);
                }

                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
}


class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback;
        this.networkManager = new NetworkManager();
        this.initializeSettings();
        this.resetProject();
    }

    initializeSettings() {
       // ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    resetProject() {
        // ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    async startCollaboration(topic) {
        if (this.isWorking) return this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –∏–ª–∏ /reset.");
        if (this.settings.enabled_networks.length < 1) return this.sendMessage("‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;

        await this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${topic}"\n\n_–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_`);

        try {
            let fileContext = await this.processStagedFiles();
            this.settings.staged_files = [];

            await this.runDiscussionLoop(fileContext);
            if (this.isWorking) await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            await this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:* ${error.message}`);
        } finally {
            this.isWorking = false;
        }
    }
    
    async processStagedFiles() {
       // ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    async runDiscussionLoop(fileContext) {
        while (this.iterations < this.settings.iteration_count) {
            if (!this.isWorking) { await this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."); return; }
            this.iterations++;
            await this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.settings.iteration_count}* ---\n`);
            
            let iterationHistory = "";

            for (const networkId of this.settings.enabled_networks) {
                if (!this.isWorking) { await this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."); return; }
                const networkName = this.networkManager.networks[networkId]?.name || this.settings.custom_networks[networkId]?.name;
                
                let prompt = `–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞: "${this.projectDescription}"\n\n`;
                if (fileContext) prompt += fileContext;
                if (this.acceptedSummaries.length > 0) {
                    prompt += `–í–æ—Ç –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤:\n${this.acceptedSummaries.map((s, i) => `–†–µ–∑—é–º–µ ${i+1}: ${s}`).join('\n\n')}\n\n`;
                }
                prompt += `–í–æ—Ç —Ö–æ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—É–Ω–¥–µ:\n${iterationHistory}\n\n---\n–ö–∞–∫ ${networkName}, –≤—ã—Å–∫–∞–∂–∏ —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è.`;

                await this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                
                // –ü–µ—Ä–µ–¥–∞–µ–º callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ generateResponse
                const response = await this.networkManager.generateResponse(networkId, prompt, this.settings, this.sendMessage);
                
                if (!this.isWorking) { await this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."); return; }
                await this.sendMessage(`*${networkName}:*\n${response}`);
                
                iterationHistory += `\n\n**${networkName} —Å–∫–∞–∑–∞–ª(–∞):**\n${response}`;
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        }
    }
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
}


// =========================================================================
// === –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–û–¢–ê (UI, –ö–û–ú–ê–ù–î–´ –ò –¢.–î.) - –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// =========================================================================
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
// ... (–≤–µ—Å—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—è —Å const chatSessions = {}, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–π "–ø—Ä–æ—Å—Ç–æ–π" –≤–µ—Ä—Å–∏–∏) ...