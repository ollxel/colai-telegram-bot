// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ Groq
const AVAILABLE_MODELS = [
    'llama3-8b-8192',    // –ë—ã—Å—Ç—Ä–∞—è –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
    'llama3-70b-8192',   // –°–∞–º–∞—è –º–æ—â–Ω–∞—è
    'mixtral-8x7b-32768', // –ë–æ–ª—å—à–∞—è –∏ —Å —Ö–æ—Ä–æ—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    'gemma-7b-it'        // –û—Ç Google
];

// --- –ö–õ–ê–°–°–´ –ü–†–û–ï–ö–¢–ê (–° –ü–û–î–î–ï–†–ñ–ö–û–ô –ù–ê–°–¢–†–û–ï–ö) ---

class PromptGenerator {
    createIterationPrompt(topicName, topicDescription, iteration, acceptedSummaries) {
        let prompt = `Topic: ${topicDescription}\n\n`;
        if (iteration === 1) {
            prompt += "This is the first round of discussion. Please provide your initial thoughts on the topic.";
        } else {
            prompt += `This is round ${iteration}. Here are the summaries from previous rounds:\n\n`;
            acceptedSummaries.forEach((summary, index) => {
                prompt += `Summary ${index + 1}: ${summary}\n\n`;
            });
            prompt += "Based on these summaries, please provide your further thoughts or build upon the existing ideas.";
        }
        return prompt;
    }
}

class NetworkManager {
    constructor() {
        // –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞. –ü–µ—Ä—Å–æ–Ω—ã –±—É–¥—É—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
        this.networks = {
            network1: { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫' },
            network2: { name: '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫' },
            summarizer: { name: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä' }
        };
    }

    // –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    async generateResponse(networkId, prompt, settings) {
        const network = this.networks[networkId];
        if (!network) throw new Error(`Network ${networkId} not found.`);

        // –ë–µ—Ä–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const systemPrompt = settings.system_prompts[networkId];

        try {
            const response = await axios.post(
                GROQ_API_URL,
                {
                    model: settings.model, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    messages: [
                        { role: "system", content: systemPrompt },
                        { role: "user", content: prompt }
                    ],
                    temperature: settings.temperature, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    max_tokens: settings.max_tokens,   // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                },
                { headers: { 'Authorization': `Bearer ${GROQ_API_KEY}` } }
            );
            return response.data.choices[0].message.content.trim();
        } catch (error) {
            console.error(`\n--- –û–®–ò–ë–ö–ê API GROQ –¥–ª—è "${network.name}" ---`);
            if (error.response) {
                console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
                console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
            } else {
                console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
            }
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á Groq –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.`);
        }
    }
}

class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback;
        this.networkManager = new NetworkManager();
        this.promptGenerator = new PromptGenerator();
        this.resetProject();
        this.initializeSettings();
    }

    initializeSettings() {
        this.settings = {
            model: 'llama3-8b-8192',
            temperature: 0.7,
            max_tokens: 1024,
            system_prompts: {
                network1: 'You are a pragmatic and analytical thinker. You focus on logic, data, and structured reasoning. Provide concise and clear arguments.',
                network2: 'You are a creative and imaginative thinker. You explore unconventional ideas, possibilities, and novel perspectives.',
                summarizer: 'You are a master synthesizer. Your role is to read a discussion and create a concise, neutral summary of the key points.'
            }
        };
    }

    resetProject() {
        this.projectName = '';
        this.projectDescription = '';
        this.iterations = 0;
        this.maxIterations = 2;
        this.acceptedSummaries = [];
        this.isWorking = false;
    }

    async startCollaboration(topic) {
        if (this.isWorking) {
            this.sendMessage("–Ø —É–∂–µ –∑–∞–Ω—è—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.");
            return;
        }

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;
        this.projectName = topic.length > 50 ? topic.substring(0, 50) + '...' : topic;

        this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${this.projectName}"`);

        try {
            await this.runDiscussionLoop();
            await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* ${error.message}`);
        } finally {
            this.isWorking = false;
        }
    }

    async runDiscussionLoop() {
        while (this.iterations < this.maxIterations) {
            this.iterations++;
            this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.maxIterations}* ---\n`);
            
            const prompt = this.promptGenerator.createIterationPrompt(
                this.projectName, this.projectDescription, this.iterations, this.acceptedSummaries
            );

            let currentDiscussion = prompt;
            const networkIds = ['network1', 'network2'];

            for (const networkId of networkIds) {
                const networkName = this.networkManager.networks[networkId].name;
                this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ NetworkManager
                const response = await this.networkManager.generateResponse(networkId, currentDiscussion, this.settings);
                this.sendMessage(`*${networkName}:*\n${response}`);
                currentDiscussion += `\n\n**${networkName}'s input:**\n${response}`;
            }

            this.sendMessage(`üìù _–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..._`);
            const summary = await this.networkManager.generateResponse('summarizer', currentDiscussion, this.settings);
            this.sendMessage(`*–°–≤–æ–¥–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iterations}:*\n${summary}`);
            this.acceptedSummaries.push(summary);
        }
    }

    async finalizeDevelopment() {
        this.sendMessage("\n\n--- üèÅ *–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...* ---");
        const finalPrompt = `Based on the topic "${this.projectDescription}" and the following summaries, create a comprehensive final output. \n\nSummaries:\n${this.acceptedSummaries.join('\n\n')}`;
        const finalOutput = await this.networkManager.generateResponse('summarizer', finalPrompt, this.settings);
        this.sendMessage(`*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏:*\n\n${finalOutput}`);
    }
}

// --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---

if (!TELEGRAM_TOKEN || !GROQ_API_KEY) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –∏–ª–∏ GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const chatSessions = {};

// --- –ù–û–í–û–ï: –£–°–¢–ê–ù–û–í–ö–ê –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ---
// –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
bot.setMyCommands([
    { command: '/start', description: 'üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–º–æ—â—å' },
    { command: '/discuss', description: 'üí¨ –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' },
    { command: '/settings', description: '‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
    { command: '/reset', description: 'üóë –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ' },
]);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
function getOrCreateSession(chatId) {
    if (!chatSessions[chatId]) {
        chatSessions[chatId] = new NeuralCollaborativeFramework((text) => {
            bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
               .catch(() => bot.sendMessage(chatId, text));
        });
    }
    return chatSessions[chatId];
}

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// --- –ù–û–í–û–ï: –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ---
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeText = `
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–∑–Ω—ã–µ AI-–ª–∏—á–Ω–æ—Å—Ç–∏ (–ê–Ω–∞–ª–∏—Ç–∏–∫ –∏ –ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫) –º–æ–≥—É—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å –∑–∞–¥–∞–Ω–Ω—É—é –≤–∞–º–∏ —Ç–µ–º—É.

*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **–ú–µ–Ω—é** (—Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞).
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \`/discuss\`.
3. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*–ü—Ä–∏–º–µ—Ä:*
\`/discuss –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\`

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å AI, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É \`/settings\`.
    `;
    bot.sendMessage(chatId, welcomeText, { parse_mode: 'Markdown' });
});


bot.onText(/\/discuss (.+)/, (msg, match) => {
    const session = getOrCreateSession(msg.chat.id);
    session.startCollaboration(match[1]);
});

bot.onText(/\/reset/, (msg) => {
    delete chatSessions[msg.chat.id];
    bot.sendMessage(msg.chat.id, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ!");
});

// --- –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ---

bot.onText(/\/settings/, (msg) => {
    const session = getOrCreateSession(msg.chat.id);
    const s = session.settings;
    const p = s.system_prompts;

    const settingsText = `
*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:*

*–ú–æ–¥–µ–ª—å:* \`${s.model}\`
*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* \`${s.temperature}\`
*–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:* \`${s.max_tokens}\`

*–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:*
- *–ê–Ω–∞–ª–∏—Ç–∏–∫:* \`${p.network1.substring(0, 50)}...\`
- *–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫:* \`${p.network2.substring(0, 50)}...\`
- *–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä:* \`${p.summarizer.substring(0, 50)}...\`

*–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:*
- \`/set_model <–∏–º—è>\`
  _–î–æ—Å—Ç—É–ø–Ω—ã–µ: ${AVAILABLE_MODELS.join(', ')}_
- \`/set_temp <0.0-2.0>\`
- \`/set_tokens <—á–∏—Å–ª–æ>\`
- \`/set_prompt <–∏–º—è_—Å–µ—Ç–∏> <—Ç–µ–∫—Å—Ç>\`
  _–ò–º–µ–Ω–∞ —Å–µ—Ç–µ–π: \`–∞–Ω–∞–ª–∏—Ç–∏–∫\`, \`–∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫\`, \`—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä\`_
  _–ü—Ä–∏–º–µ—Ä: \`/set_prompt –∞–Ω–∞–ª–∏—Ç–∏–∫ –¢—ã –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å\`_
    `;
    bot.sendMessage(msg.chat.id, settingsText, { parse_mode: 'Markdown' });
});

bot.onText(/\/set_model (.+)/, (msg, match) => {
    const model = match[1].trim();
    if (AVAILABLE_MODELS.includes(model)) {
        const session = getOrCreateSession(msg.chat.id);
        session.settings.model = model;
        bot.sendMessage(msg.chat.id, `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: \`${model}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: \`${AVAILABLE_MODELS.join(', ')}\``, { parse_mode: 'Markdown' });
    }
});

bot.onText(/\/set_temp (.+)/, (msg, match) => {
    const temp = parseFloat(match[1]);
    if (!isNaN(temp) && temp >= 0.0 && temp <= 2.0) {
        const session = getOrCreateSession(msg.chat.id);
        session.settings.temperature = temp;
        bot.sendMessage(msg.chat.id, `‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: \`${temp}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0.');
    }
});

bot.onText(/\/set_tokens (.+)/, (msg, match) => {
    const tokens = parseInt(match[1], 10);
    if (!isNaN(tokens) && tokens > 0 && tokens <= 8192) {
        const session = getOrCreateSession(msg.chat.id);
        session.settings.max_tokens = tokens;
        bot.sendMessage(msg.chat.id, `‚úÖ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: \`${tokens}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8192.');
    }
});

bot.onText(/\/set_prompt (\w+) (.+)/s, (msg, match) => {
    const networkName = match[1].toLowerCase();
    const promptText = match[2];
    
    const networkMap = {
        '–∞–Ω–∞–ª–∏—Ç–∏–∫': 'network1',
        '–∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫': 'network2',
        '—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä': 'summarizer'
    };

    const networkId = networkMap[networkName];

    if (networkId) {
        const session = getOrCreateSession(msg.chat.id);
        session.settings.system_prompts[networkId] = promptText;
        bot.sendMessage(msg.chat.id, `‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è "${networkName}" –æ–±–Ω–æ–≤–ª–µ–Ω.`);
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Å–µ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`–∞–Ω–∞–ª–∏—Ç–∏–∫\`, \`–∫—Ä–µ–∞—Ç–∏–≤—â–∏–∫\` –∏–ª–∏ \`—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä\`.`);
    }
});


bot.on('polling_error', (error) => console.log(`–û—à–∏–±–∫–∞ Polling: ${error.message}`));
