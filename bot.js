// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const AI_MODEL_ID = 'llama3-8b-8192'; // –ë—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞ Groq
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

// --- –ö–õ–ê–°–°–´ –ü–†–û–ï–ö–¢–ê ---

class PromptGenerator {
    createIterationPrompt(topicName, topicDescription, iteration, acceptedSummaries) {
        let prompt = `Topic: ${topicDescription}\n\n`;
        if (iteration === 1) {
            prompt += "This is the first round of discussion. Please provide your initial thoughts on the topic.";
        } else {
            prompt += `This is round ${iteration}. Here are the summaries from previous rounds:\n\n`;
            acceptedSummaries.forEach((summary, index) => {
                prompt += `Summary ${index + 1}: ${summary}\n\n`;
            });
            prompt += "Based on these summaries, please provide your further thoughts or build upon the existing ideas.";
        }
        return prompt;
    }
}

class NetworkManager {
    constructor() {
        this.networks = {
            network1: { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫', persona: 'You are a pragmatic and analytical thinker. You focus on logic, data, and structured reasoning. Provide concise and clear arguments.' },
            network2: { name: '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫', persona: 'You are a creative and imaginative thinker. You explore unconventional ideas, possibilities, and novel perspectives.' },
            summarizer: { name: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', persona: 'You are a master synthesizer. Your role is to read a discussion and create a concise, neutral summary of the key points.' }
        };
    }

    async generateResponse(networkId, prompt) {
        const network = this.networks[networkId];
        if (!network) throw new Error(`Network ${networkId} not found.`);

        try {
            const response = await axios.post(
                GROQ_API_URL,
                {
                    model: AI_MODEL_ID,
                    messages: [
                        { role: "system", content: network.persona },
                        { role: "user", content: prompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 1024,
                },
                { headers: { 'Authorization': `Bearer ${GROQ_API_KEY}` } }
            );
            return response.data.choices[0].message.content.trim();
        } catch (error) {
            console.error(`\n--- –û–®–ò–ë–ö–ê API GROQ –¥–ª—è "${network.name}" ---`);
            if (error.response) {
                console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
                console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
            } else {
                console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
            }
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}". –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Groq –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`);
        }
    }
}

class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback;
        this.networkManager = new NetworkManager();
        this.promptGenerator = new PromptGenerator();
        this.resetProject();
    }

    resetProject() {
        this.projectName = '';
        this.projectDescription = '';
        this.iterations = 0;
        this.maxIterations = 2; // 2 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        this.acceptedSummaries = [];
        this.isWorking = false;
    }

    async startCollaboration(topic) {
        if (this.isWorking) {
            this.sendMessage("–Ø —É–∂–µ –∑–∞–Ω—è—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.");
            return;
        }

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;
        this.projectName = topic.length > 50 ? topic.substring(0, 50) + '...' : topic;

        this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${this.projectName}"`);

        try {
            await this.runDiscussionLoop();
            await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* ${error.message}`);
        } finally {
            this.isWorking = false;
        }
    }

    async runDiscussionLoop() {
        while (this.iterations < this.maxIterations) {
            this.iterations++;
            this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.maxIterations}* ---\n`);
            
            const prompt = this.promptGenerator.createIterationPrompt(
                this.projectName, this.projectDescription, this.iterations, this.acceptedSummaries
            );

            let currentDiscussion = prompt;
            const networkIds = ['network1', 'network2'];

            for (const networkId of networkIds) {
                const networkName = this.networkManager.networks[networkId].name;
                this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                const response = await this.networkManager.generateResponse(networkId, currentDiscussion);
                this.sendMessage(`*${networkName}:*\n${response}`);
                currentDiscussion += `\n\n**${networkName}'s input:**\n${response}`;
            }

            this.sendMessage(`üìù _–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..._`);
            const summary = await this.networkManager.generateResponse('summarizer', currentDiscussion);
            this.sendMessage(`*–°–≤–æ–¥–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iterations}:*\n${summary}`);
            this.acceptedSummaries.push(summary);
        }
    }

    async finalizeDevelopment() {
        this.sendMessage("\n\n--- üèÅ *–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...* ---");
        const finalPrompt = `Based on the topic "${this.projectDescription}" and the following summaries, create a comprehensive final output. \n\nSummaries:\n${this.acceptedSummaries.join('\n\n')}`;
        const finalOutput = await this.networkManager.generateResponse('summarizer', finalPrompt);
        this.sendMessage(`*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏:*\n\n${finalOutput}`);
    }
}

// --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---

if (!TELEGRAM_TOKEN || !GROQ_API_KEY) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –∏–ª–∏ GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const chatSessions = {};

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/discuss <–≤–∞—à–∞ —Ç–µ–º–∞>`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n" +
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n`/discuss –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã`"
    );
});

bot.onText(/\/discuss (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const topic = match[1];

    if (!chatSessions[chatId]) {
        chatSessions[chatId] = new NeuralCollaborativeFramework((text) => {
            bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
               .catch(() => bot.sendMessage(chatId, text)); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ Markdown –Ω–µ —É–¥–∞–ª—Å—è
        });
    }
    chatSessions[chatId].startCollaboration(topic);
});

bot.onText(/\/reset/, (msg) => {
    const chatId = msg.chat.id;
    delete chatSessions[chatId];
    bot.sendMessage(chatId, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ!");
});

bot.on('polling_error', (error) => console.log(`–û—à–∏–±–∫–∞ Polling: ${error.message}`));
