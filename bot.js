// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ Groq
const AVAILABLE_MODELS = ['llama3-8b-8192', 'llama3-70b-8192', 'mixtral-8x7b-32768', 'gemma-7b-it'];

// --- –ö–õ–ê–°–°–´ –ü–†–û–ï–ö–¢–ê ---

class PromptGenerator {
    createIterationPrompt(topicDescription, iteration, acceptedSummaries) {
        let prompt = `The main topic of discussion is: "${topicDescription}"\n\n`;
        if (iteration === 1) {
            prompt += "This is the first round. Please provide your initial thoughts on the topic from your unique perspective.";
        } else {
            prompt += `This is round ${iteration}. Here are the accepted summaries from previous rounds:\n\n`;
            acceptedSummaries.forEach((summary, index) => {
                prompt += `--- Accepted Summary ${index + 1} ---\n${summary}\n\n`;
            });
            prompt += "Based on these summaries, please provide your further thoughts or build upon the existing ideas.";
        }
        return prompt;
    }
}

class NetworkManager {
    constructor() {
        this.networks = {
            network1: { name: 'Analytical Network', short_name: 'analytical' },
            network2: { name: 'Creative Network', short_name: 'creative' },
            network3: { name: 'Implementation Network', short_name: 'implementation' },
            network4: { name: 'Data Science Network', short_name: 'data' },
            network5: { name: 'Ethical Network', short_name: 'ethical' },
            network6: { name: 'User Experience Network', short_name: 'ux' },
            network7: { name: 'Systems Thinking Network', short_name: 'systems' },
            network8: { name: 'Devil\'s Advocate Network', short_name: 'advocate' },
            summarizer: { name: 'Synthesizer Network', short_name: 'synthesizer' }
        };
    }

    async generateResponse(networkId, prompt, settings) {
        const network = this.networks[networkId];
        if (!network) throw new Error(`Network ${networkId} not found.`);

        let systemPrompt = settings.system_prompts[networkId];
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —è–∑—ã–∫—É –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
        systemPrompt += `\n\nIMPORTANT INSTRUCTION: You MUST respond ONLY in ${settings.discussion_language}. Do not use any other language.`;

        try {
            const response = await axios.post(
                GROQ_API_URL,
                {
                    model: settings.model,
                    messages: [
                        { role: "system", content: systemPrompt },
                        { role: "user", content: prompt }
                    ],
                    temperature: settings.temperature,
                    max_tokens: settings.max_tokens,
                },
                { headers: { 'Authorization': `Bearer ${GROQ_API_KEY}` } }
            );
            return response.data.choices[0].message.content.trim();
        } catch (error) {
            console.error(`\n--- –û–®–ò–ë–ö–ê API GROQ –¥–ª—è "${network.name}" ---`);
            if (error.response) {
                console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}, –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
            } else {
                console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
            }
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}".`);
        }
    }
}

class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback;
        this.networkManager = new NetworkManager();
        this.promptGenerator = new PromptGenerator();
        this.initializeSettings();
        this.resetProject();
    }

    initializeSettings() {
        this.settings = {
            model: 'llama3-8b-8192',
            temperature: 0.7,
            max_tokens: 1024,
            discussion_language: 'Russian',
            enabled_networks: ['network1', 'network2'], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–≤–µ
            system_prompts: {
                network1: 'You are an Analytical Network. Focus on logic, data, and structured reasoning.',
                network2: 'You are a Creative Network. Focus on novel ideas, alternatives, and innovative perspectives.',
                network3: 'You are an Implementation Network. Focus on practical application and technical feasibility.',
                network4: 'You are a Data Science Network. Focus on statistics, patterns, and empirical evidence.',
                network5: 'You are an Ethical Network. Focus on moral implications and societal impact.',
                network6: 'You are a User Experience Network. Focus on user-centered design and usability.',
                network7: 'You are a Systems Thinking Network. Focus on holistic views and interconnections.',
                network8: 'You are a Devil\'s Advocate Network. Your role is to challenge assumptions and stress-test ideas.',
                summarizer: 'You are a Synthesizer Network. Your role is to read a discussion and create a concise, neutral summary of the key points.'
            }
        };
    }

    resetProject() {
        this.iterations = 0;
        this.maxIterations = 2;
        this.acceptedSummaries = [];
        this.isWorking = false;
    }

    async startCollaboration(topic) {
        if (this.isWorking) {
            this.sendMessage("–û–±—Å—É–∂–¥–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞.");
            return;
        }
        if (this.settings.enabled_networks.length < 2) {
            this.sendMessage("‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/toggle`.");
            return;
        }

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;

        this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${topic}"`);

        try {
            await this.runDiscussionLoop();
            await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* ${error.message}`);
        } finally {
            this.isWorking = false;
        }
    }

    async runDiscussionLoop() {
        while (this.iterations < this.maxIterations) {
            this.iterations++;
            this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.maxIterations}* ---\n`);
            
            const prompt = this.promptGenerator.createIterationPrompt(this.projectDescription, this.iterations, this.acceptedSummaries);
            let currentDiscussion = prompt;

            for (const networkId of this.settings.enabled_networks) {
                const networkName = this.networkManager.networks[networkId].name;
                this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                const response = await this.networkManager.generateResponse(networkId, currentDiscussion, this.settings);
                this.sendMessage(`*${networkName}:*\n${response}`);
                // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–π—Ä–æ–Ω–∫–∏
                currentDiscussion += `\n\n**${networkName}'s input:**\n${response}`;
            }

            this.sendMessage(`üìù _–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç..._`);
            const summary = await this.networkManager.generateResponse('summarizer', currentDiscussion, this.settings);
            this.sendMessage(`*–°–≤–æ–¥–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iterations}:*\n${summary}`);
            
            // --- –ù–û–í–û–ï: –ì–û–õ–û–°–û–í–ê–ù–ò–ï ---
            this.sendMessage(`üó≥Ô∏è _–ü—Ä–æ–≤–æ–¥–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–≤–æ–¥–∫–µ..._`);
            let votesFor = 0;
            let votesAgainst = 0;
            let rejectionReasons = [];

            for (const networkId of this.settings.enabled_networks) {
                const networkName = this.networkManager.networks[networkId].name;
                const votePrompt = `Here is the discussion context:\n${currentDiscussion}\n\nHere is the summary to vote on:\n"${summary}"\n\nAs the ${networkName}, do you accept this summary? Respond with only "Accept" or "Reject" followed by a brief reason.`;
                const voteResponse = await this.networkManager.generateResponse(networkId, votePrompt, this.settings);
                this.sendMessage(`*${networkName} –≥–æ–ª–æ—Å—É–µ—Ç:*\n${voteResponse}`);
                
                if (voteResponse.toLowerCase().includes('accept')) {
                    votesFor++;
                } else {
                    votesAgainst++;
                    rejectionReasons.push(`- ${networkName}: ${voteResponse.replace(/reject/i, '').trim()}`);
                }
            }

            if (votesAgainst > votesFor) {
                this.sendMessage(`*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ* (${votesFor} –∑–∞, ${votesAgainst} –ø—Ä–æ—Ç–∏–≤). –°–≤–æ–¥–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω—ã:\n${rejectionReasons.join('\n')}`);
            } else {
                this.sendMessage(`*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!* (${votesFor} –∑–∞, ${votesAgainst} –ø—Ä–æ—Ç–∏–≤). –°–≤–æ–¥–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.`);
                this.acceptedSummaries.push(summary);
            }
        }
    }

    async finalizeDevelopment() {
        this.sendMessage("\n\n--- üèÅ *–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...* ---");
        const finalPrompt = `Based on the topic "${this.projectDescription}" and the following accepted summaries, create a comprehensive final output. \n\nSummaries:\n${this.acceptedSummaries.join('\n\n')}`;
        const finalOutput = await this.networkManager.generateResponse('summarizer', finalPrompt, this.settings);
        this.sendMessage(`*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏:*\n\n${finalOutput}`);
    }
}

// --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---

if (!TELEGRAM_TOKEN || !GROQ_API_KEY) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const chatSessions = {};

bot.setMyCommands([
    { command: '/start', description: 'üöÄ –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' },
    { command: '/discuss', description: 'üí¨ –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä. /discuss —Ç–µ–º–∞)' },
    { command: '/settings', description: '‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
    { command: '/toggle', description: 'üïπ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å (–Ω–∞–ø—Ä. /toggle ethical)' },
    { command: '/reset', description: 'üóë –°–±—Ä–æ—Å–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
]);

function getOrCreateSession(chatId) {
    if (!chatSessions[chatId]) {
        chatSessions[chatId] = new NeuralCollaborativeFramework((text) => {
            bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
               .catch(() => bot.sendMessage(chatId, text));
        });
    }
    return chatSessions[chatId];
}

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

bot.onText(/\/start/, (msg) => {
    const welcomeText = `
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º AI-–ª–∏—á–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å –∑–∞–¥–∞–Ω–Ω—É—é –≤–∞–º–∏ —Ç–µ–º—É.

*–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ **–ú–µ–Ω—é** (—Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \`/discuss\`.
2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ.
   *–ü—Ä–∏–º–µ—Ä:* \`/discuss –ü–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\`

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- \`/settings\` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —è–∑—ã–∫ –∏ –ø—Ä–æ–º–ø—Ç—ã.
- \`/toggle <–∏–º—è>\` - –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
- \`/reset\` - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    `;
    bot.sendMessage(msg.chat.id, welcomeText, { parse_mode: 'Markdown' });
});

bot.onText(/\/discuss (.+)/, (msg, match) => {
    getOrCreateSession(msg.chat.id).startCollaboration(match[1]);
});

bot.onText(/\/reset/, (msg) => {
    delete chatSessions[msg.chat.id];
    bot.sendMessage(msg.chat.id, "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
});

// --- –ù–û–í–´–ï –ò –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ---

bot.onText(/\/settings/, (msg) => {
    const session = getOrCreateSession(msg.chat.id);
    const s = session.settings;
    const nm = session.networkManager;

    const enabledNetworks = s.enabled_networks.map(id => nm.networks[id].name).join(', ');
    
    const settingsText = `
*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞:*

*–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ç–∏:* ${enabledNetworks}
*–Ø–∑—ã–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:* \`${s.discussion_language}\`
*–ú–æ–¥–µ–ª—å:* \`${s.model}\`
*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* \`${s.temperature}\`
*–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:* \`${s.max_tokens}\`

*–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:*
- \`/set_lang <—è–∑—ã–∫>\` (–Ω–∞–ø—Ä. \`English\`, \`Russian\`, \`German\`)
- \`/set_model <–∏–º—è>\`
- \`/set_temp <0.0-2.0>\`
- \`/set_tokens <—á–∏—Å–ª–æ>\`
- \`/set_prompt <–∏–º—è_—Å–µ—Ç–∏> <—Ç–µ–∫—Å—Ç>\`
  _–ò–º–µ–Ω–∞ —Å–µ—Ç–µ–π: ${Object.values(nm.networks).map(n => n.short_name).join(', ')}_
    `;
    bot.sendMessage(msg.chat.id, settingsText, { parse_mode: 'Markdown', disable_web_page_preview: true });
});

bot.onText(/\/toggle (.+)/, (msg, match) => {
    const session = getOrCreateSession(msg.chat.id);
    const networkShortName = match[1].trim().toLowerCase();
    
    const networkEntry = Object.entries(session.networkManager.networks).find(([id, net]) => net.short_name === networkShortName);

    if (!networkEntry) {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Å–µ—Ç–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è /toggle: ${Object.values(session.networkManager.networks).filter(n=>n.short_name !== 'synthesizer').map(n => n.short_name).join(', ')}`);
        return;
    }
    
    const [networkId, network] = networkEntry;
    const enabled = session.settings.enabled_networks;
    
    if (enabled.includes(networkId)) {
        session.settings.enabled_networks = enabled.filter(id => id !== networkId);
        bot.sendMessage(msg.chat.id, `‚úÖ *${network.name}* –≤—ã–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.`);
    } else {
        enabled.push(networkId);
        bot.sendMessage(msg.chat.id, `‚úÖ *${network.name}* –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.`);
    }
});

bot.onText(/\/set_lang (.+)/, (msg, match) => {
    const lang = match[1].trim();
    getOrCreateSession(msg.chat.id).settings.discussion_language = lang;
    bot.sendMessage(msg.chat.id, `‚úÖ –Ø–∑—ã–∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: \`${lang}\``, { parse_mode: 'Markdown' });
});

bot.onText(/\/set_model (.+)/, (msg, match) => {
    const model = match[1].trim();
    if (AVAILABLE_MODELS.includes(model)) {
        getOrCreateSession(msg.chat.id).settings.model = model;
        bot.sendMessage(msg.chat.id, `‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: \`${model}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: \`${AVAILABLE_MODELS.join(', ')}\``, { parse_mode: 'Markdown' });
    }
});

bot.onText(/\/set_temp (.+)/, (msg, match) => {
    const temp = parseFloat(match[1]);
    if (!isNaN(temp) && temp >= 0.0 && temp <= 2.0) {
        getOrCreateSession(msg.chat.id).settings.temperature = temp;
        bot.sendMessage(msg.chat.id, `‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: \`${temp}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0.');
    }
});

bot.onText(/\/set_tokens (.+)/, (msg, match) => {
    const tokens = parseInt(match[1], 10);
    if (!isNaN(tokens) && tokens > 0 && tokens <= 32768) { // –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç –¥–ª—è Mixtral
        getOrCreateSession(msg.chat.id).settings.max_tokens = tokens;
        bot.sendMessage(msg.chat.id, `‚úÖ –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: \`${tokens}\``, { parse_mode: 'Markdown' });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 32768.');
    }
});

bot.onText(/\/set_prompt (\w+) (.+)/s, (msg, match) => {
    const networkShortName = match[1].toLowerCase();
    const promptText = match[2];
    const session = getOrCreateSession(msg.chat.id);
    
    const networkEntry = Object.entries(session.networkManager.networks).find(([id, net]) => net.short_name === networkShortName);

    if (networkEntry) {
        const [networkId, network] = networkEntry;
        session.settings.system_prompts[networkId] = promptText;
        bot.sendMessage(msg.chat.id, `‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è "${network.name}" –æ–±–Ω–æ–≤–ª–µ–Ω.`);
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Å–µ—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ –∏–∑: ${Object.values(session.networkManager.networks).map(n => n.short_name).join(', ')}`);
    }
});

bot.on('polling_error', (error) => console.log(`–û—à–∏–±–∫–∞ Polling: ${error.message}`));
