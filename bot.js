// --- –ó–ê–í–ò–°–ò–ú–û–°–¢–ò ---
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const HUGGINGFACE_TOKEN = process.env.HUGGINGFACE_TOKEN;
const AI_MODEL_ID = 'gpt2'; // <-- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
const HUGGINGFACE_API_URL = `https://api-inference.huggingface.co/models/${AI_MODEL_ID}`;

// --- –ö–õ–ê–°–°–´ –ò–ó –í–ê–®–ï–ì–û –ü–†–û–ï–ö–¢–ê (–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ï –ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï) ---

class PromptGenerator {
    createIterationPrompt(topicName, topicDescription, iteration, acceptedSummaries) {
        let prompt = `Topic Name: ${topicName}\nTopic Description: ${topicDescription}\n\n`;
        if (iteration === 1) {
            prompt += "This is the first iteration. Begin exploring the core aspects of this topic with an open mind.";
        } else {
            prompt += `This is iteration ${iteration}. Here are the previously accepted summaries:\n\n`;
            acceptedSummaries.forEach((summary, index) => {
                prompt += `Summary ${index + 1}: ${summary}\n\n`;
            });
            prompt += "Focus on synthesizing the discussion into a coherent whole, addressing any remaining questions or loose ends.";
        }
        return prompt;
    }
}

class NetworkManager {
    constructor() {
        this.networks = {
            network1: { name: '–ê–Ω–∞–ª–∏—Ç–∏–∫', persona: 'You are an analytical thinker. Focus on logical, structured, and evidence-based reasoning.' },
            network2: { name: '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫', persona: 'You are a creative thinker. Focus on novel ideas, alternatives, and exploring possibilities.' },
            network3: { name: '–≠—Ç–∏–∫', persona: 'You specialize in ethical analysis. Focus on moral implications and societal impact.' },
            summarizer: { name: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', persona: 'You are specialized in synthesizing discussions and finding consensus.' }
        };
        this.networkSettings = {
            temperature: 0.7,
            max_tokens: 512,
            top_p: 0.9,
        };
    }

    createSystemPrompt(basePersona) {
        return basePersona;
    }

    async generateResponse(networkId, prompt) {
        const network = this.networks[networkId];
        if (!network) throw new Error(`Network ${networkId} not found.`);

        const systemPrompt = this.createSystemPrompt(network.persona);
        const fullPrompt = `<s>[INST] ${systemPrompt}\n\n${prompt} [/INST]`;

        try {
            const response = await axios.post(HUGGINGFACE_API_URL, {
                inputs: fullPrompt,
                parameters: {
                    max_new_tokens: this.networkSettings.max_tokens,
                    temperature: this.networkSettings.temperature,
                    top_p: this.networkSettings.top_p,
                    return_full_text: false,
                }
            }, {
                headers: { 'Authorization': `Bearer ${HUGGINGFACE_TOKEN}` }
            });
            return response.data[0].generated_text.trim();
        } catch (error) {
            // --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            const errorMessage = error.response?.data?.error;

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–æ–π, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∏—â–µ–º –≤ –Ω–µ–π —Ç–µ–∫—Å—Ç
            if (typeof errorMessage === 'string' && errorMessage.includes("is currently loading")) {
                console.log(`Model ${AI_MODEL_ID} is loading. Retrying in 25 seconds...`);
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ "—Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ"
                if (global.sendMessageCallback) {
                    global.sendMessageCallback(`_(–ú–æ–¥–µ–ª—å –¥–ª—è "${network.name}" –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É...)_`);
                }
                await new Promise(resolve => setTimeout(resolve, 25000));
                return this.generateResponse(networkId, prompt); // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
                console.error(`Hugging Face API Error for ${network.name}:`);
                if (error.response) {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é –∏ —Ç.–¥.)
                    console.error(`Status: ${error.response.status}`);
                    console.error(`Data: ${JSON.stringify(error.response.data, null, 2)}`);
                } else {
                    // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, DNS –∏ —Ç.–¥.)
                    console.error(`Message: ${error.message}`);
                }
                // –ò –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
                throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç "${network.name}". –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
            }
            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        }
    }
}

class NeuralCollaborativeFramework {
    constructor(sendMessageCallback) {
        this.sendMessage = sendMessageCallback; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
        this.networkManager = new NetworkManager();
        this.promptGenerator = new PromptGenerator();
        this.resetProject();
    }

    resetProject() {
        this.projectName = '';
        this.projectDescription = '';
        this.iterations = 0;
        this.maxIterations = 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
        this.discussionHistory = [];
        this.acceptedSummaries = [];
        this.isWorking = false;
    }

    async startCollaboration(topic) {
        if (this.isWorking) {
            this.sendMessage("–Ø —É–∂–µ –∑–∞–Ω—è—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /reset.");
            return;
        }

        this.resetProject();
        this.isWorking = true;
        this.projectDescription = topic;
        this.projectName = topic.length > 50 ? topic.substring(0, 50) + '...' : topic;

        this.sendMessage(`*–ù–∞—á–∏–Ω–∞—é –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –Ω–∞ —Ç–µ–º—É:* "${this.projectName}"\n\n_–ù–µ–π—Ä–æ—Å–µ—Ç—è–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ._`);

        try {
            await this.runDiscussionLoop();
            await this.finalizeDevelopment();
        } catch (error) {
            console.error(error);
            this.sendMessage(`‚ùóÔ∏è*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è:*\n${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω Hugging Face.`);
        } finally {
            this.isWorking = false;
        }
    }

    async runDiscussionLoop() {
        while (this.iterations < this.maxIterations) {
            this.iterations++;
            this.sendMessage(`\n\n--- üí¨ *–ò—Ç–µ—Ä–∞—Ü–∏—è ${this.iterations} –∏–∑ ${this.maxIterations}* ---\n`);
            
            const prompt = this.promptGenerator.createIterationPrompt(
                this.projectName,
                this.projectDescription,
                this.iterations,
                this.acceptedSummaries
            );

            let currentDiscussion = prompt;
            const networkIds = ['network1', 'network2', 'network3'];

            for (const networkId of networkIds) {
                const networkName = this.networkManager.networks[networkId].name;
                this.sendMessage(`ü§î _${networkName} –¥—É–º–∞–µ—Ç..._`);
                const response = await this.networkManager.generateResponse(networkId, currentDiscussion);
                this.sendMessage(`*${networkName}:*\n${response}`);
                currentDiscussion += `\n${networkName}: ${response}`;
            }

            this.sendMessage(`üìù _–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ..._`);
            const summary = await this.networkManager.generateResponse('summarizer', currentDiscussion);
            this.sendMessage(`*–°–≤–æ–¥–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${this.iterations}:*\n${summary}`);
            this.acceptedSummaries.push(summary);
        }
    }

    async finalizeDevelopment() {
        this.sendMessage("\n\n--- üèÅ *–í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –§–æ—Ä–º–∏—Ä—É—é –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...* ---");
        const finalPrompt = `Based on the topic "${this.projectDescription}" and the following summaries from each iteration of a collaborative discussion, create a comprehensive final output. \n\nSummaries:\n${this.acceptedSummaries.join('\n\n')}`;
        const finalOutput = await this.networkManager.generateResponse('summarizer', finalPrompt);
        this.sendMessage(`*–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏:*\n\n${finalOutput}`);
    }
}

// --- –õ–û–ì–ò–ö–ê –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢–ê ---

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });
const chatSessions = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –º–æ–≥—É—Ç –æ–±—â–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å–æ–±–æ–π.\n\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/discuss <–≤–∞—à–∞ —Ç–µ–º–∞>`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n" +
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n`/discuss –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∫–æ–ª–æ–Ω–∏–∑–∞—Ü–∏–∏ –ú–∞—Ä—Å–∞`\n\n" +
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/reset`."
    );
});

bot.onText(/\/discuss (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const topic = match[1];

    if (!chatSessions[chatId]) {
        const sendMessageCallback = (text) => {
            bot.sendMessage(chatId, text, { parse_mode: 'Markdown' }).catch(err => {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                if (err.response && err.response.body.description.includes('parse error')) {
                    bot.sendMessage(chatId, text);
                } else {
                    console.error("Telegram send error:", err);
                }
            });
        };
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–±—ç–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ NetworkManager
        global.sendMessageCallback = sendMessageCallback;
        chatSessions[chatId] = new NeuralCollaborativeFramework(sendMessageCallback);
    }

    chatSessions[chatId].startCollaboration(topic);
});

bot.onText(/\/reset/, (msg) => {
    const chatId = msg.chat.id;
    if (chatSessions[chatId]) {
        if (chatSessions[chatId].isWorking) {
            chatSessions[chatId].isWorking = false; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        }
        delete chatSessions[chatId];
        bot.sendMessage(chatId, "–¢–µ–∫—É—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Ç–µ–º–µ!");
    } else {
        bot.sendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞.");
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
bot.on('polling_error', (error) => {
    console.log(`Polling error: ${error.code} - ${error.message}`);
});